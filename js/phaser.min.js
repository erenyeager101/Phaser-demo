<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cosmic Hopper - Daily Space Challenge</title>
    <style>
        * { margin: 0; padding: 0; }
        body { background: #000; }
        #dailyChallenge {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-family: Arial;
            z-index: 1000;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.80.1/dist/phaser.min.js"></script>
</head>
<body>
    <div id="dailyChallenge"></div>
    <script>
const DAILY_CHALLENGE_KEY = 'cosmicDailyChallenge';
const CURRENCY_KEY = 'spaceCurrency';

class MainScene extends Phaser.Scene {
    constructor() {
        super('MainScene');
        this.player = null;
        this.cursors = null;
        this.obstacles = null;
        this.score = 0;
        this.scoreText = null;
        this.isGameOver = false;
        this.dailyChallenge = null;
        this.currency = 0;
        this.collectedToday = 0;
    }

    preload() {
        this.load.image('rocket', 'assets/rocket.png');
        this.load.image('asteroid', 'assets/asteroid.png');
        this.load.image('star', 'assets/star.png');
        this.load.image('blackhole', 'assets/blackhole.png');
    }

    create() {
        // Initialize daily challenge
        this.initDailyChallenge();
        
        // Game setup
        this.add.image(400, 300, 'space').setDisplaySize(800, 600);
        this.player = this.physics.add.sprite(100, 300, 'rocket').setScale(0.1);
        this.player.setCollideWorldBounds(true);
        
        this.obstacles = this.physics.add.group();
        this.stars = this.physics.add.group();
        
        this.time.addEvent({
            delay: 1500,
            callback: this.createObstacle,
            callbackScope: this,
            loop: true
        });

        this.physics.add.overlap(this.player, this.obstacles, this.gameOver, null, this);
        this.physics.add.overlap(this.player, this.stars, this.collectStar, null, this);
        
        this.scoreText = this.add.text(16, 16, 'Score: 0', { 
            fontSize: '32px', 
            fill: '#fff',
            fontFamily: 'Arial',
            stroke: '#000',
            strokeThickness: 4
        });

        this.cursors = this.input.keyboard.createCursorKeys();
        this.input.on('pointerdown', () => this.player.setVelocityY(-300));
        
        // Load saved currency
        this.currency = parseInt(localStorage.getItem(CURRENCY_KEY)) || 0;
    }

    initDailyChallenge() {
        const lastPlayed = localStorage.getItem(DAILY_CHALLENGE_KEY);
        const today = new Date().toDateString();
        
        if (lastPlayed !== today) {
            this.dailyChallenge = {
                type: Phaser.Math.RND.pick(['collect', 'survive', 'distance']),
                target: Phaser.Math.Between(5, 15),
                completed: false,
                reward: 50
            };
            localStorage.setItem(DAILY_CHALLENGE_KEY, today);
            this.collectedToday = 0;
        } else {
            this.dailyChallenge = JSON.parse(localStorage.getItem('currentChallenge'));
        }
        
        this.updateChallengeDisplay();
    }

    updateChallengeDisplay() {
        const challengeDiv = document.getElementById('dailyChallenge');
        if (this.dailyChallenge && !this.dailyChallenge.completed) {
            let text = 'Daily Challenge: ';
            switch(this.dailyChallenge.type) {
                case 'collect': 
                    text += `Collect ${this.dailyChallenge.target} stars (${this.collectedToday}/${this.dailyChallenge.target})`;
                    break;
                case 'survive':
                    text += `Survive ${this.dailyChallenge.target} obstacles`;
                    break;
                case 'distance':
                    text += `Fly ${this.dailyChallenge.target}00 units`;
                    break;
            }
            challengeDiv.textContent = text;
        } else {
            challengeDiv.textContent = 'Daily Challenge Completed!';
        }
    }

    createObstacle() {
        const obstacleType = Phaser.Math.RND.pick(['asteroid', 'blackhole']);
        const gap = Phaser.Math.Between(150, 250);
        const y = Phaser.Math.Between(100, 500);
        
        const topObstacle = this.obstacles.create(800, y - gap, obstacleType);
        const bottomObstacle = this.obstacles.create(800, y + gap, obstacleType);
        
        [topObstacle, bottomObstacle].forEach(obs => {
            obs.setVelocityX(-200);
            obs.setImmovable(true);
            if (obstacleType === 'blackhole') {
                obs.setScale(0.5);
                this.tweens.add({
                    targets: obs,
                    scale: 0.6,
                    duration: 1000,
                    yoyo: true,
                    repeat: -1
                });
            }
        });

        if (Math.random() > 0.5) {
            const star = this.stars.create(800, y, 'star');
            star.setVelocityX(-200);
        }
    }

    collectStar(player, star) {
        star.disableBody(true, true);
        this.score += 10;
        this.currency += 5;
        this.collectedToday++;
        this.scoreText.setText(`Score: ${this.score}\nSpace Bucks: ${this.currency}`);
        this.updateChallengeDisplay();
        this.checkDailyChallenge();
        
        // Save currency
        localStorage.setItem(CURRENCY_KEY, this.currency);
    }

    checkDailyChallenge() {
        if (!this.dailyChallenge || this.dailyChallenge.completed) return;

        let completed = false;
        switch(this.dailyChallenge.type) {
            case 'collect':
                completed = this.collectedToday >= this.dailyChallenge.target;
                break;
            case 'survive':
                completed = this.score >= this.dailyChallenge.target * 10;
                break;
            case 'distance':
                completed = this.score >= this.dailyChallenge.target * 100;
                break;
        }

        if (completed) {
            this.dailyChallenge.completed = true;
            this.currency += this.dailyChallenge.reward;
            localStorage.setItem('currentChallenge', JSON.stringify(this.dailyChallenge));
            this.updateChallengeDisplay();
        }
    }

    update() {
        if (this.isGameOver) return;

        if (this.cursors.space.isDown || this.input.activePointer.isDown) {
            this.player.setVelocityY(-300);
        }

        this.obstacles.getChildren().forEach(obstacle => {
            if (obstacle.x < -50) {
                obstacle.destroy();
            }
        });

        this.score += 1;
        this.scoreText.setText(`Score: ${this.score}\nSpace Bucks: ${this.currency}`);
    }
     gameOver() {
        this.isGameOver = true;
        this.physics.pause();
        this.player.setTint(0xff0000);
        
        this.add.text(400, 300, 'Game Over', {
            fontSize: '48px',
            fill: '#ff0000',
            fontFamily: 'Arial'
        }).setOrigin(0.5);

        this.add.text(400, 350, 'Click to play again', {
            fontSize: '24px',
            fill: '#fff',
            fontFamily: 'Arial'
        }).setOrigin(0.5);

        this.input.once('pointerdown', () => {
            this.scene.restart();
            this.isGameOver = false;
        });
    }
}

   

const config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    physics: {
        default: 'arcade',
        arcade: { gravity: { y: 500 } }
    },
    scene: MainScene
};

const game = new Phaser.Game(config);
    </script>
</body>
</html>
